plugins {
    id "com.gorylenko.gradle-git-properties"
    id "io.spring.dependency-management"
    id "org.grails.grails-plugin"
    id "com.bertramlabs.asset-pipeline"
    id "idea"
    id "eclipse"
    id "maven-publish"
}

group "org.grails.plugins"

ext {
    grailsVersion = project.grailsVersion
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://repo1.maven.org/maven2" }
}

configurations {
    all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details->
            if (details.requested.group == 'org.seleniumhq.selenium') {
                details.useVersion('4.19.1')
            }
        }
    }
}

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-dependencies"
    implementation 'javax.servlet:javax.servlet-api:4.0.1'
    implementation "commons-io:commons-io:2.16.1"
    runtimeOnly "com.bertramlabs.plugins:asset-pipeline-grails:4.3.0"
    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.grails:grails-web-testing-support"
    console "org.grails:grails-console"
    implementation 'org.grails.plugins:mail:4.0.0'
    implementation 'com.github.scribejava:scribejava-core:8.3.3'
    implementation 'com.github.scribejava:scribejava-apis:8.3.3'
    implementation group: 'io.projectreactor', name: 'reactor-core', version: '3.6.6'
    implementation 'com.microsoft.graph:microsoft-graph:6.+'
    implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

gitProperties {
    keys = ['git.branch', 'git.commit.id', 'git.commit.time', 'git.commit.id.abbrev']
    failOnNoGitDirectory = true
    extProperty = 'gitProps' // git properties will be put in a map at project.ext.gitProps
}

generateGitProperties.outputs.upToDateWhen { false } // make sure the generateGitProperties task always executes (even when git.properties is not changed)

jar {
    dependsOn generateGitProperties
    manifest {
        attributes("Built-By": System.getProperty("user.name"))
        attributes(["Plugin-Version"        : version,
                    "Plugin-Title"          : project.name,
                    "Plugin-Build-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    "Git-Commit"            : "${-> project.ext.gitProps['git.commit.id.abbrev']}",
                    "Git-Branch"            : "${-> project.ext.gitProps['git.branch']}"])
    }
    from sourceSets.main.output
    exclude 'git.properties'
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty 'webdriver.chrome.driver', "${System.getenv('CHROMEWEBDRIVER')}/chromedriver"
    systemProperty 'webdriver.gecko.driver', "${System.getenv('GECKOWEBDRIVER')}/geckodriver"
}

publishing {
    publications {
        mavenJar(MavenPublication) {
            from components.java
            artifact sourceJar
        }
    }
    repositories {
        maven {
            name = "NexusRepo"
            credentials {
                username project.findProperty("nexusUsername") ?: System.getenv("NEXUS_USERNAME")
                password project.findProperty("nexusPassword") ?: System.getenv("NEXUS_PASSWORD")
            }
            url project.findProperty("nexusUrl") ?: System.getenv("NEXUS_URL")
            allowInsecureProtocol = true
        }
    }
}
